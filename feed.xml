<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="zh" /><updated>2020-05-04T16:19:45+08:00</updated><id>/feed.xml</id><title type="html">lzxZz's Blog</title><subtitle>野兽屈服于本能, 人类受控于理智&amp;nbsp;&amp;nbsp;&amp;nbsp;Beasts succumb to instinct, humans are controlled by mind</subtitle><author><name>lzxZz</name></author><entry><title type="html">lzxZz的时间管理秘籍</title><link href="/blog/2020/05/04/time-manager/" rel="alternate" type="text/html" title="lzxZz的时间管理秘籍" /><published>2020-05-04T00:00:00+08:00</published><updated>2020-05-04T00:00:00+08:00</updated><id>/blog/2020/05/04/time-manager</id><content type="html" xml:base="/blog/2020/05/04/time-manager/">&lt;blockquote&gt;
  &lt;p&gt;最近罗志祥的&quot;时间管理&quot;有一点火, 还获得了时间刺客的称号. 关于如何充分利用上这24小时, 我也有一点点心得体会.&lt;/p&gt;

  &lt;p&gt;先直接介绍方法吧, 方法很简单就一个字&lt;strong&gt;熬&lt;/strong&gt;, 硬熬, 困的时候熬一会, 困意很快就会过去. 实在顶不住的时候就睡觉. 只睡3-5小时左右.&lt;/p&gt;

  &lt;p&gt;这样一来, 按最大值, 别人睡7-8小时, 你只睡5小时, 你就相对每天多出来了2-3小时. 一周就能多出来14-21小时, 就平白比别人多了一天.&lt;/p&gt;

  &lt;p&gt;大画家达芬奇更是当之无愧的时间管理大师, 每工作4小时睡15分钟。这样， 一昼夜花在睡眠上的时间累计只有不足1.5（24/4.25*1/4 = 1.41）小时.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;下面开始正文了.
***&lt;/p&gt;

&lt;p&gt;关于&quot;时间管理&quot;的技术, 实在是因缘际会. 我连续好几天都无法得到充分的睡眠. 虽然会有一些时间段犯困, 但是不像以前那样一整天人都昏昏欲睡. 后来进行了几天的实验, 效果都很好. 于是决定分享一下.&lt;/p&gt;

&lt;p&gt;关于睡眠, 世界公认的成年人推荐睡眠时长为8小时, 小孩的时长增加而老人的时长则会缩短. 但是根据统计, 能够满足8小时睡眠的人其实并不多. 平均睡眠时长最少的国家是日本, 平均睡眠时间只有6.5小时.(数据来自于《斯坦福高效睡眠法》)&lt;/p&gt;

&lt;p&gt;而睡眠并不是睡得时间长就好, 睡眠最重要的是质量, 而不是数量.&lt;/p&gt;

&lt;p&gt;下图是睡眠深度和睡眠时间的关系图.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/time-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到, 深度睡眠在刚入睡时出现, 而随着睡眠时长的增加睡眠会越来越浅. 而深度睡眠给人的休息比浅睡眠好的多.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是REM睡眠的缺失会影响记忆的形成, 也就是会损伤记忆力.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而大多数晚上休息不好的原因都在于刚开始入睡的90分钟, 一旦这90分钟的睡眠质量较低, 那么就解乏就会收到极大损失.&lt;/p&gt;

&lt;p&gt;因此在提高清醒程度上, 最开始的90分钟效果是最好的, 随着睡眠时间的增加, 收益越来越低. 通过砍掉低收益的4.5小时之后的睡眠时间. 能够只损失少量的深度睡眠时长, 将大量的REM睡眠时间转为清醒时间. 这就是时间管理的秘密.&lt;/p&gt;

&lt;p&gt;而睡眠时间的缩短, 首先导致的就是睡眠压力的增大, 人的睡意会比以往要大的多. 能够加速入睡时间.&lt;/p&gt;

&lt;p&gt;下面的几个步骤就形成了正循环, 简直完美!!!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;砍掉低质量的睡眠, 带来了睡眠时间的缩短&lt;/li&gt;
  &lt;li&gt;睡眠时间的缩短, 导致了睡眠压力的增大&lt;/li&gt;
  &lt;li&gt;睡眠压力的增大, 加速了入睡过程, 提高了睡眠质量.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;题外话, 当然在硬熬的时候会对身体有所损伤, 典型的就是脑瓜子会嗡嗡的. 这是身体在向你报警. 但是根据我们程序员的习惯&lt;code class=&quot;highlighter-rouge&quot;&gt;Warning&lt;/code&gt;就是正确. 可以无视掉.
对记忆的损伤也没有证据表明有或者没有.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;大家见仁见智吧&lt;/strong&gt;&lt;/p&gt;</content><author><name>lzxZz</name></author><category term="[&quot;逗机灵&quot;]" /><category term="闲聊" /><summary type="html">最近罗志祥的&quot;时间管理&quot;有一点火, 还获得了时间刺客的称号. 关于如何充分利用上这24小时, 我也有一点点心得体会. 先直接介绍方法吧, 方法很简单就一个字熬, 硬熬, 困的时候熬一会, 困意很快就会过去. 实在顶不住的时候就睡觉. 只睡3-5小时左右. 这样一来, 按最大值, 别人睡7-8小时, 你只睡5小时, 你就相对每天多出来了2-3小时. 一周就能多出来14-21小时, 就平白比别人多了一天. 大画家达芬奇更是当之无愧的时间管理大师, 每工作4小时睡15分钟。这样， 一昼夜花在睡眠上的时间累计只有不足1.5（24/4.25*1/4 = 1.41）小时.</summary></entry><entry><title type="html">重构-概述</title><link href="/blog/2020/04/24/refactoring-overview/" rel="alternate" type="text/html" title="重构-概述" /><published>2020-04-24T00:00:00+08:00</published><updated>2020-04-24T00:00:00+08:00</updated><id>/blog/2020/04/24/refactoring-overview</id><content type="html" xml:base="/blog/2020/04/24/refactoring-overview/">&lt;p&gt;对于一个事物, 照旧是灵魂三问:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;是什么?&lt;/li&gt;
  &lt;li&gt;为什么?&lt;/li&gt;
  &lt;li&gt;怎么做?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;heading-什么是重构&quot;&gt;什么是重构?&lt;/h3&gt;

&lt;p&gt;书中给出了两个定义, 一个名词, 一个动词&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;重构(名词) : 对软件结构的一种调整, 目的是在不改变软件的可观察行为的前提下, 提高其可理解性, 降低其修改成本.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;重构(动词) : 使用一系列重构手法, 在不改变软件可观察行为的前提下, 调整其结构.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两个定义都提到了一个至关重要的词&lt;strong&gt;不改变可观察行为&lt;/strong&gt;, 直截了当的说就是用户一端不应该感知到你的修改, 不论这个用户是另一个程序员还是商业上的用户.&lt;/p&gt;

&lt;p&gt;另外一个重要的词是&lt;strong&gt;结构&lt;/strong&gt;, 重构调整的代码的结构. 就是简单的把函数从文件A移动到文件B. 虽然说这些操作看起来不起眼, 并且有一点瞎搞的意思. 但是经过大量的软件工程师的实践, 重构确实能够保持代码的活力.&lt;/p&gt;

&lt;h3 id=&quot;heading-为什么重构&quot;&gt;为什么重构?&lt;/h3&gt;
&lt;p&gt;重构的最大的目的就是保持代码的活力. 业界对于很久之前遗留下来的运行中的代码有一个称呼—&lt;strong&gt;屎山&lt;/strong&gt;, 这些代码往往是十年之前的, 由于时间的关系, 某一领域的编码手段会有很大的变化, 因此去理解一份远古时代的代码是很困难的.&lt;/p&gt;

&lt;p&gt;重构的的目的有以下几个:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;改进软件的设计
 在开发中架构是很容易腐败的. 设计可能不合时宜, 并且在不断的功能扩展中大几率会不合适.
 而重构能够让架构有调整的机会, 不断的保持架构是最合适的状态.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让代码更容易理解
 一方面模块的划分, 让阅读代码的时候不必记下一大堆的环境.&lt;/p&gt;

    &lt;p&gt;重构给函数和变量起一个最合适的名字也是极为有利于代码理解的.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;帮助找到bug
 重构都是极小的修改, 哪里引入的bug很容易发现&lt;/li&gt;
  &lt;li&gt;提高编程速度
 提高了发现bug的速度和减少了扩展新功能的时间来加速编码.(曲线救国)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;heading-什么时候重构&quot;&gt;什么时候重构?&lt;/h3&gt;
&lt;p&gt;在确定什么时候需要重构之前, 我们先确定什么时候不重构.
并不是所有的代码都需要重构.
当一段&quot;需要重构&quot;的代码被隐藏在一个API之下的时候, 并且不需要理解这一个API. 那么就不需要重构.
当重写比重构还简单的时候, 那就直接重写.&lt;/p&gt;

&lt;p&gt;下面介绍重构的时机.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;当需要添加新功能的时候
 重构能够让添加新功能更容易, 但是如果已经很容易了就不要重构了.&lt;/li&gt;
  &lt;li&gt;需要理解代码的时候
 重构来帮助自己理解代码, 重构让代码的可读性更高, 这就会帮助理解代码.&lt;/li&gt;
  &lt;li&gt;发现有更好的做法
 有时候阅读代码的时候能够发现一些不好的代码. 对这些代码进行重构.
 如果重构的工作量很小那么就直接重构, 如果需要一段时间, 那么就先记下来, 完成目前的任务再回来重构.&lt;/li&gt;
  &lt;li&gt;代码审查的时候
 代码审查的时候和上一个时机差不多.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;heading-构造重构体系&quot;&gt;构造重构体系&lt;/h3&gt;
&lt;p&gt;使用CI, 单元测试来构造重构体系.&lt;/p&gt;

&lt;p&gt;使用CI让每一点修改都能够提交到代码库进行同步, 让大家看到的都是最新的代码.&lt;/p&gt;

&lt;p&gt;使用单元测试来保持代码的可观察行为不变.&lt;/p&gt;

&lt;h3 id=&quot;heading-代码的坏味道&quot;&gt;代码的坏味道.&lt;/h3&gt;
&lt;p&gt;如果你发现了代码的坏味道, 那么就重构他.(但是先考虑这一段代码是否需要重构)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;神秘命名
 无法解释用途的名称都是不好的名称.&lt;/li&gt;
  &lt;li&gt;重复代码
 重复代码的问题与数据库冗余的问题一样, 会造成修改的不一致.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过长函数
 初次见到大量短函数代码库的程序员会觉得程序里到处都是委托调用.&lt;/p&gt;

    &lt;p&gt;小函数也会给代码的阅读者带来负担, 需要切换上下文.&lt;/p&gt;

    &lt;p&gt;太长的函数的问题在于代码不够灵活, 复用性较低.&lt;/p&gt;

    &lt;p&gt;分解函数的原则是:&lt;strong&gt;每当感觉需要注释来说明一些什么的时候, 就把要说明的放进一个独立的函数中, 并以用途命名.&lt;/strong&gt; 尽可能在代码中显示&quot;做什么&quot;, 较少的暴露&quot;怎么做&quot;, 更加有利于阅读.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;就算只有一行代码, 如果需要注释来说明, 那也值得提取到独立函数中&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过长函数参数列表
 太长的参数列表令人迷惑.&lt;/p&gt;

    &lt;p&gt;对于相关联的几个参数使用类将其包装起来.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;全局数据
 全局数据的问题依旧是全局的可修改性,&lt;/p&gt;

    &lt;p&gt;全局数据包括全局变量, 类静态变量和单例.&lt;/p&gt;

    &lt;p&gt;处理全局数据的最佳方式是控制其作用域, 禁止任意的修改.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可变数据
 可变数据的存在在多线程编程中是一个令人头痛的问题. 
 对可变数据的处理依旧是进行约束, 禁止其任意的变化.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;发散式变化
 发散式变化是项目腐败的最大杀手, 当你添加一个功能需要修改三个函数, 而调整这三个函数又要涉及到另外的十个函数, 这十个函数又会涉及到几十个函数的时候. 心智负担过大. 很难修改.&lt;/p&gt;

    &lt;p&gt;处理办法最好是分离函数, 形成单独的上下文.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;霰弹式修改
 有些类似于发散式变化. 每当遇到某种变化, 需要修改若干个类, 所面临的就是霰弹式修改.
 这一问题的处理方法就是把分散的逻辑整合到一起.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;依恋情结
 一个函数和另一个模块的交互格外频繁, 远超过自己模块内部.&lt;/p&gt;

    &lt;p&gt;处理办法就是将和依赖其他模块的部分移动到其他模块.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据泥团
 成组出现的数据.
 建议使用类来包装起来.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基本类型偏执
 很多时候不愿意创建领域类型, 而使用基本类型替代表示. 典型的就是字符串.&lt;/p&gt;

    &lt;p&gt;自定义类型的最大好处是能够增加约束. 例如不同的长度单位.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重复的switch
 重复的switch问题也在于修改一致性上.
 当庞大的代码库中出现了好几个相同的switch, 修改但凡漏掉一个就会引发bug.
 使用多态来替代.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;循环语句
 使用管道取代循环. 实现函数式编程.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;冗余的元素
 只有一个函数的类.
 将其内联&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;无用的通用性
 许多时候都会因为过度设计写出来一些暂时没有用途的通用类.
 如果一个函数或者类的唯一用户是测试用例. 那么就移除掉测试和代码本身.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;临时字段
 一些只为特殊情况存在的字段. 后来者很难猜测其用途.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过长的消息链
 冗长的对象调用关系.  意味着客户端代码和调用关系紧密耦合.
 建议使用隐藏委托关系来处理.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中间人
 A对B的调用委托给C, 变成A调用C, C调用B. 过度使用则会隐藏起来实际关系. 某个类的接口有一大半的函数都是委托给其他类, 这就是过度运用.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内幕交易
 两个模块之间隐藏的大量的数据交流.&lt;/p&gt;

    &lt;p&gt;处理手段主要是函数的移动, 新模块的创建.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过大的类
 单个类完成了太多的任务, 将其分成几个小的职责单一的类.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异曲同工的类
 两个类完成一件事, 可以用于实现的替换.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;纯数据类
 只有数据和访问器的类, 没有行为.&lt;/p&gt;

    &lt;p&gt;纯数据类意味着行为被放在了错误的地方.&lt;/p&gt;

    &lt;p&gt;例外情况就是纯数据类的对象被用作函数调用的返回结果.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被拒绝的馈赠
 子类会继承超类中的函数和数据, 如果子类并不需要所有继承来的东西.&lt;/p&gt;

    &lt;p&gt;如果子类拒绝支持超类的接口, 那么就不应该继承.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注释
 如果需要一段注释来解释代码, 那么将代码替换为函数, 用函数名来解释.&lt;/p&gt;

    &lt;p&gt;如果续呀注释说明系统的规格需求, 那么使用断言.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>lzxZz</name></author><category term="[&quot;软件工程&quot;]" /><category term="重构" /><category term="编码" /><summary type="html">对于一个事物, 照旧是灵魂三问: 是什么? 为什么? 怎么做?</summary></entry><entry><title type="html">数据库设计 ER模型</title><link href="/blog/2020/04/17/er-model/" rel="alternate" type="text/html" title="数据库设计  ER模型" /><published>2020-04-17T00:00:00+08:00</published><updated>2020-04-17T00:00:00+08:00</updated><id>/blog/2020/04/17/er-model</id><content type="html" xml:base="/blog/2020/04/17/er-model/"></content><author><name>lzxZz</name></author><category term="[&quot;数据库&quot;]" /><category term="ER模型" /><category term="数据库" /><summary type="html"></summary></entry><entry><title type="html">网络编程中的事件模型</title><link href="/blog/2020/04/14/event-pattern/" rel="alternate" type="text/html" title="网络编程中的事件模型" /><published>2020-04-14T00:00:00+08:00</published><updated>2020-04-14T00:00:00+08:00</updated><id>/blog/2020/04/14/event-pattern</id><content type="html" xml:base="/blog/2020/04/14/event-pattern/">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt; 事件模型在网络编程中作为最基础的内容, 是必须掌握的内容. 下面就详细介绍网络编程中的相关事件模型.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>lzxZz</name></author><summary type="html">前言 事件模型在网络编程中作为最基础的内容, 是必须掌握的内容. 下面就详细介绍网络编程中的相关事件模型.</summary></entry><entry><title type="html">意念的力量</title><link href="/blog/2020/04/09/desire/" rel="alternate" type="text/html" title="意念的力量" /><published>2020-04-09T00:00:00+08:00</published><updated>2020-04-09T00:00:00+08:00</updated><id>/blog/2020/04/09/desire</id><content type="html" xml:base="/blog/2020/04/09/desire/">&lt;h3 id=&quot;heading-意念的力量&quot;&gt;意念的力量&lt;/h3&gt;

&lt;p&gt;九日大嘴宝哥在直播的时候常说的一句话就是&quot;只要你的愿望足够强烈, 全宇宙的力量都会帮你实现&quot;. 当然指望自己是宇宙之子是不现实的, 但是稍微控制一下自己还是可以的.&lt;/p&gt;

&lt;p&gt;人的生物钟是一个很神奇的东西, 深入的东西不谈, 这里只說一下生物钟里面的睡眠. 我不知道他人是否有这样的体验, 反正我是能够在一定程度上控制自己醒来的时间[&lt;em&gt;当然想要在晚上酣睡的时候醒来是不现实的&lt;/em&gt;]. 自上大学以来, 虽说不多, 但是赶火车啥的经历还是不少的, 又因为我晕车, 所以我坐火车前几天都是比较紧张的, 赶车的前一天晚上往往睡的比较迟, 但是第二天我全都能准时醒来, 而且是在我闹钟响之前.&lt;/p&gt;

&lt;p&gt;一直以来, 我只要是白天午睡, 必定是2小时左右, 这是我十多年来的习惯, 因此我也很少午休, 但是最近调整作息, 要早睡早起, 略微压缩了一点晚上睡觉的时间, 导致白天需要补觉. 但是白天睡眠时间一长就会导致晚上睡不着, 第二天起得晚这种问题, 这就破坏了早睡早起的习惯.&lt;/p&gt;

&lt;p&gt;对于这个问题我最开始采用的是使用不舒服的睡眠姿态,例如趴在桌子上, 斜躺在椅子上, 因为不舒服所以很难进入深睡眠, 这样闹钟就能把我叫醒. 后来发现这样子睡眠质量也不太行. 最后我还是在床上或者沙发上午休了. 睡到什么时候起就什么时候吧, 反正褪黑素到了, 不行晚上就吃褪黑素算了.&lt;/p&gt;

&lt;p&gt;但是神奇的事情发生了, 因为我的时间表是下午2点要开始干活的, 这样我就要一点半起来清醒一下. 我告诉自己一点半要起来, 之后的几天我都准时的在一点半左右醒了. 我完全没有定闹钟, 靠的是我自己的生物钟, 这也太神奇了.&lt;/p&gt;

&lt;p&gt;这又是一篇没头没脑的文章. 我想说的是唯心主义的内心影响外物显然是不合理的, 但是&quot;心&quot;是可以影响自身的, 在某种程度上, 你的&quot;心&quot;就是脑内的电信号, 通过某些方式刺激你的身体, 做出一些反应.&lt;/p&gt;

&lt;p&gt;相由心生&lt;/p&gt;</content><author><name>lzxZz</name></author><category term="[&quot;闲聊&quot;]" /><category term="闲聊" /><summary type="html">意念的力量</summary></entry><entry><title type="html">第一篇博客</title><link href="/blog/2020/04/04/first/" rel="alternate" type="text/html" title="第一篇博客" /><published>2020-04-04T00:00:00+08:00</published><updated>2020-04-04T00:00:00+08:00</updated><id>/blog/2020/04/04/first</id><content type="html" xml:base="/blog/2020/04/04/first/">&lt;p&gt;自打上次要在简书写博客已经过去了半年了, 期间是基本上啥都没有写. 时隔半年,最终还是使用jekyll+githubpages搭建起来了博客. 使用的这个主题也还可以, 满足了我的几大要求:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;按时间归类&lt;/li&gt;
  &lt;li&gt;支持分类和标签&lt;/li&gt;
  &lt;li&gt;支持搜索&lt;/li&gt;
  &lt;li&gt;支持发布时间,&lt;/li&gt;
  &lt;li&gt;支持最后修改时间, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;laset_updated&lt;/code&gt;字段指定日期即可&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;接下来研究一下能不能仿照目前的分类, 做出来一个系列来. 某些文章单独的使用分类划分还是不太合适, 使用一個系列会比较好.&lt;/p&gt;

&lt;p&gt;今天还弄好了基于&lt;code class=&quot;highlighter-rouge&quot;&gt;rake&lt;/code&gt;的新文章创建工具, 还做了一点小小的修改.&lt;/p&gt;</content><author><name>lzxZz</name></author><category term="other" /><summary type="html">自打上次要在简书写博客已经过去了半年了, 期间是基本上啥都没有写. 时隔半年,最终还是使用jekyll+githubpages搭建起来了博客. 使用的这个主题也还可以, 满足了我的几大要求: 按时间归类 支持分类和标签 支持搜索 支持发布时间, 支持最后修改时间, 使用laset_updated字段指定日期即可</summary></entry><entry><title type="html">习惯</title><link href="/blog/2020/04/04/habit/" rel="alternate" type="text/html" title="习惯" /><published>2020-04-04T00:00:00+08:00</published><updated>2020-04-04T00:00:00+08:00</updated><id>/blog/2020/04/04/habit</id><content type="html" xml:base="/blog/2020/04/04/habit/">&lt;h3 id=&quot;heading-习惯&quot;&gt;习惯&lt;/h3&gt;

&lt;p&gt;我个人认为, 在个人成长方面最最最重要的就是习惯. 历来成功者莫不是在某一个或者某几个领域做到极致的人, 而习惯在其中就起到了至关重要的作用. 当然也有大毅力者, 强行控制自己做好做深一件事, 但是对于大多数人来说, 习惯性的做某件事才是更好的选择.&lt;/p&gt;

&lt;p&gt;就赖床这一点而言, 许多的人都有赖床的习惯. 一方面是躺在床上确实舒服, 另一个则是习惯性的赖床. 不赖床真的有那么难吗? 起床是很简单的一件事, 但是对抗自己的习惯却是很难的一件事.&lt;/p&gt;

&lt;p&gt;在&lt;em&gt;习惯的力量&lt;/em&gt;一书中, 习惯被解释为&quot;在触发习惯的事件发生后的一系列自动的活动&quot;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;说出来你可能不信, 我的大脑有自己的想法. 我明明应该早点做完手头的工作, 写完老师布置的作业, 但是我就是习惯性的拖延, 好像有一种神秘的力量控制了我&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这就是习惯的力量, 当触发器打开的时候, 你的行为就不在遵从你的理智了, 而是遵循你长久以来在大脑内养成的习惯这种特殊的&quot;本能&quot;.&lt;/p&gt;

&lt;p&gt;在日常生活中习惯无处不在, 早上起床之后你做的第一件事是什么? 每天都是这样的吗? 穿衣服的时候你思考了先穿上衣还是先穿裤子了吗? 你考虑了先穿左腿还是先穿右腿了吗? 你使用筷子吃饭的时候需要思考怎么握住筷子,怎么使用筷子吗? 每天上班上学的路线你还需要计划吗?&lt;/p&gt;

&lt;p&gt;这些都是习惯, 也是无关痛痒的习惯. 但是也有一些习惯对你影响较大.&lt;/p&gt;

&lt;p&gt;当你完成了一件事情的一小个阶段的时候, 你的选择是什么? 是休息一下还是继续努力.
当你面对一项可以推迟的任务时, 你手头又没有其他需要做的事情, 你是做完这个任务还是拖延?
当你闲来无事的时候你选择的消遣方式是什么?&lt;/p&gt;

&lt;p&gt;完成一个阶段任务的时候, 小小的休息一下绝对是合情合理的, 暫停一下给自己庆一下功总无可厚非吧. 但是离谱到我这样, 我写完一句话我都要去看看直播, 看看小说, 去IM群里吹一会, 做到干活5分钟摸鱼两小时, 我看是很难找出来几个了.&lt;/p&gt;

&lt;p&gt;扯了这么多, 我也不知道我要表达的是什么, 这大概就是因为我从一开始就没有想好这篇文章要说什么吧. 希望我能一点点替换掉自己的那些拖后腿的习惯吧. 就从规律作息开始吧.&lt;/p&gt;</content><author><name>lzxZz</name></author><category term="[&quot;习惯&quot;, &quot;个人发展&quot;]" /><category term="习惯" /><category term="个人成长" /><category term="闲聊" /><summary type="html">习惯</summary></entry></feed>